/*
 * RTaskResultImpl.cs
 *
 * Copyright (C) 2010-2015 by Microsoft Corporation
 *
 * This program is licensed to you under the terms of Version 2.0 of the
 * Apache License. This program is distributed WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
 * Apache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0) for more details.
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DeployR;

namespace DeployRBroker
{
    /// <summary>
    /// Represents a handle to the result generated by an RTask.
    /// </summary>
    /// <remarks></remarks>
    public class RTaskResultImpl : RTaskResult
    {

        private String m_id = "";
        private int m_type;
        private String m_generatedConsole = "";
        private List<String> m_generatedPlots;
        private List<String> m_generatedFiles;
        private List<RData> m_generatedObjects;
        private List<String> m_storedFiles;
        private Boolean m_success = false;
        private Boolean m_interrupted = false;
        private Exception m_failure;
        private long m_timeOnCode = 0;
        private long m_timeOnServer = 0;
        private long m_timeOnCall = 0;
        private Boolean m_repeatTask = false;

        /// <summary>
        /// Default constructor.
        /// </summary>
        /// <remarks></remarks>
        protected RTaskResultImpl() 
        {
        }
        
        internal RTaskResultImpl(String id,
                               int type,
                               Boolean success,
                               long timeOnCode,
                               long timeOnServer,
                               long timeOnCall,
                               Exception failure) 
        {

            m_id = id;
            m_type = type;
            m_success = success;
            m_timeOnCode = timeOnCode;
            m_timeOnServer = timeOnServer;
            m_timeOnCall = timeOnCall;
            m_failure = failure;
            m_interrupted = false;
            m_generatedConsole = "";
            m_generatedPlots = null;
            m_generatedFiles = null;
            m_generatedObjects = null;
            m_storedFiles = null;
      }

        internal RTaskResultImpl(String id,
                               int type,
                               Boolean success,
                               long timeOnCode,
                               long timeOnServer,
                               long timeOnCall,
                               Exception failure,
                               Boolean interrupted,
                               String generatedConsole,
                               List<String> generatedPlots,
                               List<String> generatedFiles,
                               List<RData> generatedObjects,
                               List<String> storedFiles) 
        {

            m_id = id;
            m_type = type;
            m_success = success;
            m_timeOnCode = timeOnCode;
            m_timeOnServer = timeOnServer;
            m_timeOnCall = timeOnCall;
            m_failure = failure;
            m_interrupted = interrupted;
            m_generatedConsole = generatedConsole;
            m_generatedPlots = generatedPlots;
            m_generatedFiles = generatedFiles;
            m_generatedObjects = generatedObjects;
            m_storedFiles = storedFiles;
        }

        /// <summary>
        /// Maps to a project execution or job identifier
        /// </summary>
        /// <returns>RTask identifier</returns>
        /// <remarks></remarks>
        public String getID()
        {
            return m_id;
        }

        /// <summary>
        /// RTask type
        /// </summary>
        /// <returns>RTask type</returns>
        /// <remarks></remarks>
        public int getType()
        {
            return m_type;
        }

        /// <summary>
        /// Task R session generated console output
        /// </summary>
        /// <returns>Task R session generated console output</returns>
        /// <remarks></remarks>
        public String getGeneratedConsole()
        {
            return m_generatedConsole;
        }

        /// <summary>
        /// Task R session graphics device generated plots.
        /// </summary>
        /// <returns>Task R session graphics device generated plots.</returns>
        /// <remarks></remarks>
        public List<String> getGeneratedPlots()
        {
            return m_generatedPlots;
        }

        /// <summary>
        /// Task R session working directory generated files
        /// </summary>
        /// <returns>Task R session working directory generated files</returns>
        /// <remarks></remarks>
        public List<String> getGeneratedFiles()
        {
            return m_generatedFiles;
        }


        /// <summary>
        /// Task R session workspace generated objects
        /// </summary>
        /// <returns>Task R session workspace generated objects</returns>
        /// <remarks></remarks>
        public List<RData> getGeneratedObjects()
        {
            return m_generatedObjects;
        }

        /// <summary>
        /// Task generated files stored to DeployR repository
        /// </summary>
        /// <returns>Task generated files stored to DeployR repository</returns>
        /// <remarks></remarks>
        public List<String> getStoredFiles()
        {
            return m_storedFiles;
        }

        /// <summary>
        /// Task success indicator
        /// </summary>
        /// <returns>Task success indicator</returns>
        /// <remarks></remarks>
        public Boolean isSuccess()
        {
            return m_success;
        }

        /// <summary>
        /// Task interrupted indicator
        /// </summary>
        /// <returns>Task interrupted indicator</returns>
        /// <remarks></remarks>
        public Boolean isInterrupted()
        {
            return m_interrupted;
        }

        /// <summary>
        /// Task failure indicator
        /// </summary>
        /// <returns>Task failure indicator</returns>
        /// <remarks></remarks>
        public Exception getFailure()
        {
            return m_failure;
        }

        /// <summary>
        /// Task time spent executing R code on server
        /// </summary>
        /// <returns>Task time spent executing R code on server</returns>
        /// <remarks></remarks>
        public long getTimeOnCode()
        {
            return m_timeOnCode;
        }

        /// <summary>
        /// Task time spent being processed on server
        /// </summary>
        /// <returns>Task time spent being processed on server</returns>
        /// <remarks></remarks>
        public long getTimeOnServer()
        {
            return m_timeOnServer;
        }

        /// <summary>
        /// Task time spent on call to server
        /// </summary>
        /// <returns>Task time spent on call to server</returns>
        /// <remarks></remarks>
        public long getTimeOnCall()
        {
            return m_timeOnCall;
        }


        /// <summary>
        /// Returns a string representation of this object
        /// </summary>
        /// <returns>Returns a string representation of this object</returns>
        /// <remarks></remarks>
        public String toString()
        {
            return "[ " + m_success + " , " + 
                        m_timeOnCode + " , " + 
                        m_timeOnServer + " , " + 
                        m_timeOnCall + " , " + 
                        m_failure + " ]";
        }

        /// <summary>
        /// Task flag indicating task has been automatically resubmitted following failed task execution due to grid failure.
        /// </summary>
        /// <value></value>
        /// <returns>Boolean indicating task repeat status</returns>
        /// <remarks></remarks>
        public Boolean repeatTask 
        {
            get
            {
                return m_repeatTask;
            }
            set
            {
                m_repeatTask = value;
            }
        }
    }
}
